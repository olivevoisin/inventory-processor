// __tests__/unit/modules/invoice-service.test.js
const fs = require('fs').promises;
const path = require('path');

// Create inline mocks instead of using jest.mock
const mockInvoiceProcessor = {
  extractInvoiceData: jest.fn(),
  processInvoice: jest.fn(),
  convertToInventoryFormat: jest.fn()
};

const mockTranslationService = {
  translateText: jest.fn(),
  detectLanguage: jest.fn()
};

const mockDb = {
  saveInvoice: jest.fn(),
  getInvoiceById: jest.fn(),
  updateInvoice: jest.fn()
};

// Mock modules explicitly
jest.mock('tesseract.js', () => ({}), { virtual: true });
jest.mock('winston', () => ({}), { virtual: true });
jest.mock('node-cache', () => function NodeCache() { return {}; }, { virtual: true });
jest.mock('@google-cloud/translate', () => ({}), { virtual: true });
jest.mock('../../../utils/logger', () => ({}), { virtual: true });
jest.mock('../../../modules/invoice-processor', () => mockInvoiceProcessor, { virtual: true });
jest.mock('../../../modules/translation-service', () => mockTranslationService, { virtual: true });
jest.mock('../../../utils/database-utils', () => mockDb, { virtual: true });

// Mock the file system
jest.mock('fs', () => {
  const actualFs = jest.requireActual('fs');
  return {
    ...actualFs,
    promises: {
      readdir: jest.fn(),
      readFile: jest.fn(),
      unlink: jest.fn().mockResolvedValue(undefined),
      writeFile: jest.fn().mockResolvedValue(undefined),
      mkdir: jest.fn().mockResolvedValue(undefined)
    }
  };
});

describe('Invoice Service Module', () => {
  // Import the module after mocking dependencies
  const invoiceService = require('../../../modules/invoice-service');
  
  beforeEach(() => {
    // Clear all mocks before each test
    jest.clearAllMocks();
  });
  
  describe('processIncomingInvoices', () => {
    test('should process all invoices in the incoming directory', async () => {
      // Setup mock for readdir to return some fake files
      fs.readdir.mockResolvedValue(['invoice1.pdf', 'invoice2.pdf']);
      
      // Setup mock for readFile to return fake file contents
      fs.readFile.mockImplementation((filePath) => {
        const fileName = path.basename(filePath);
        return Promise.resolve(Buffer.from(`Mock content for ${fileName}`));
      });
      
      // Setup mocks for the invoice processor
      mockInvoiceProcessor.extractInvoiceData.mockImplementation((fileContent) => {
        return Promise.resolve({
          invoiceId: `INV-${Math.floor(Math.random() * 1000)}`,
          total: 100.00,
          items: [{ description: 'Test Item', amount: 100.00 }]
        });
      });
      
      mockDb.saveInvoice.mockImplementation((invoice) => {
        return Promise.resolve({ ...invoice, _id: 'mock-id' });
      });
      
      // Call the function
      const results = await invoiceService.processIncomingInvoices();
      
      // Verify the results
      expect(fs.readdir).toHaveBeenCalledWith(expect.any(String));
      expect(fs.readFile).toHaveBeenCalledTimes(2);
      expect(mockInvoiceProcessor.extractInvoiceData).toHaveBeenCalledTimes(2);
      expect(mockDb.saveInvoice).toHaveBeenCalledTimes(2);
      expect(results.length).toBe(2);
      expect(results[0].status).toBe('success');
      expect(results[1].status).toBe('success');
    });
    
    test('should handle errors for individual invoices', async () => {
      // Setup mock for readdir to return some fake files
      fs.readdir.mockResolvedValue(['good-invoice.pdf', 'bad-invoice.pdf']);
      
      // Setup mock for readFile
      fs.readFile.mockImplementation((filePath) => {
        const fileName = path.basename(filePath);
        return Promise.resolve(Buffer.from(`Mock content for ${fileName}`));
      });
      
      // Setup invoice processor to succeed for one file and fail for another
      mockInvoiceProcessor.extractInvoiceData.mockImplementation((fileContent) => {
        if (fileContent.includes('bad-invoice')) {
          return Promise.reject(new Error('Failed to extract data'));
        }
        return Promise.resolve({
          invoiceId: 'INV-123',
          total: 100.00,
          items: [{ description: 'Test Item', amount: 100.00 }]
        });
      });
      
      mockDb.saveInvoice.mockImplementation((invoice) => {
        return Promise.resolve({ ...invoice, _id: 'mock-id' });
      });
      
      // Call the function
      const results = await invoiceService.processIncomingInvoices();
      
      // Verify the results
      expect(fs.readdir).toHaveBeenCalledWith(expect.any(String));
      expect(fs.readFile).toHaveBeenCalledTimes(2);
      expect(mockInvoiceProcessor.extractInvoiceData).toHaveBeenCalledTimes(2);
      expect(mockDb.saveInvoice).toHaveBeenCalledTimes(1);
      expect(results.length).toBe(2);
      expect(results[0].status).toBe('success');
      expect(results[1].status).toBe('error');
      expect(results[1].error).toBeDefined();
    });
  });
});
